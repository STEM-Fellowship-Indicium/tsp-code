##
## Adjust to relative path
##
if __name__ == "__main__":
    import sys

    sys.path.append("src")


##
## Imports
##
import torch
from torch.utils.data import Dataset
import numpy as np


##
## Generated by ChatGPT
##
class GraphDataset(Dataset):
    ##
    ## Constructor
    ##
    def __init__(self, num_samples: int, num_nodes: int) -> None:
        """Initializes the GraphDataset class

        Args:
            num_samples (int): Number of samples to generate
            num_nodes (int): Number of nodes in each graph
        """
        self.num_samples = num_samples
        self.num_nodes = num_nodes
        self.graphs = []
        self.tours = []

        ##
        ## End of function
        ##

    ##
    ## Length of the dataset
    ##
    def __len__(self) -> int:
        """Length of the dataset

        Returns:
            int: The number of samples in the dataset
        """
        return self.num_samples

        ##
        ## End of function
        ##

    ##
    ## Get a sample from the dataset
    ##
    def __getitem__(self, idx: int) -> tuple:
        """Get a sample from the dataset

        Args:
            idx (int): Index of the sample to retrieve

        Returns:
            tuple: A tuple containing the graph and the shortest tour
        """
        return torch.tensor(self.graphs[idx], dtype=torch.float32), torch.tensor(
            self.tours[idx], dtype=torch.int64
        )

        ##
        ## End of function
        ##

    ##
    ## Set the dataset to random graphs
    ##
    def set_rand(self) -> None:
        """Set the dataset to random graphs"""
        for _ in range(self.num_samples):
            # Generate random points
            points = np.random.rand(self.num_nodes, 2)

            # Calculate the distance matrix
            distance_matrix = np.zeros((self.num_nodes, self.num_nodes))
            for i in range(self.num_nodes):
                for j in range(self.num_nodes):
                    distance_matrix[i, j] = np.linalg.norm(points[i] - points[j])

            # Add the graph and the shortest tour to the dataset
            self.graphs.append(distance_matrix)
            self.tours.append(np.random.permutation(self.num_nodes))

        ##
        ## End of function
        ##

    ##
    ## End of class
    ##


##
## This tests the GraphDataset class only if we're executing THIS current file.
##
if __name__ == "__main__":
    from torch.utils.data import DataLoader

    # Create a dataset
    dataset = GraphDataset(num_samples=10, num_nodes=20)
    # Set the dataset to random graphs
    dataset.set_rand()
    # Create a dataloader
    dataloader = DataLoader(dataset, batch_size=2, shuffle=True)
    # Iterate over the dataloader
    for i, (graph, tour) in enumerate(dataloader):
        print(f"Batch {i + 1}:")
        print(f"Graph shape: {graph.shape}")
        print(f"Tour shape: {tour.shape}")
        print(f"Graph: {graph}")
        print(f"Tour: {tour}")
        print()

##
## End of file
##
